# -*- python -*-
# ex: set syntax=python:

import re
import posixpath, ntpath

c = BuildmasterConfig = {}
####### BUILDSLAVES
from buildbot.buildslave import BuildSlave

slave_names = {
    'x86-win32': ['sdwilsh-windows%i' % x for x in range(1,3)],
#    'x86_64-win32': ['sdwilsh-windows%i' % x for x in range(3,5)],
    'x86-fedora': ['johnford.info-slave1'],
    'x86-freebsd': ['robarnold-slave%i' % x for x in range(1,3)],
    'x86_64-osx': ['zpao-slave%i' % x for x in range(1,3)] +
                  ['gavin-slave%i' % x for x in range(1,3)] +
                  ['jhford-air-test'],
}
slaves = {}
c['slaves'] = []
for platform in slave_names.keys():
    slaves[platform] = []
    for i in slave_names[platform]:
      slave = BuildSlave(i, "password", max_builds=1)
      slaves[platform].append(slave)
      c['slaves'].append(slave)
c['slavePortnum'] = 9989

####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Configure, Compile, ShellCommand
from buildbot.steps.transfer import FileDownload

def argv_conv(platform, cmd):
    if 'win32' in platform:
        if type(cmd) is str:
            str_cmd = cmd
        else:
            str_cmd = ' '.join(cmd)
        real_cmd = "sh -c '" + str_cmd + "'"
    else:
        real_cmd = cmd
    print platform, '\t', real_cmd
    return real_cmd

def make(platform, target=None, file=None, dir=None, vars=None,
         keep_going=False):
    #FreeBSD uses gmake for GNU Make
    if 'freebsd' in platform:
        cmd_list = ['gmake']
    else:
        cmd_list = ['make']
    if keep_going:
        cmd_list.append('-k')
    if file:
        cmd_list.extend(['-f', file])
    if dir:
        cmd_list.extend(['-C', dir])
    if target:
        cmd_list.append(target)
    if vars:
        assert type(vars) is dict, "make vars should be in dict"
        for key in vars.keys():
            cmd_list.append("%s=%s" % (key, vars[key]))
    return argv_conv(platform, cmd_list)

from buildbot.status.builder import FAILURE, SUCCESS, WARNINGS, worst_status

class TestShellCommand(ShellCommand):
    def __init__(self, **kwargs):
        self.super_class = ShellCommand
        self.super_class.__init__(self, **kwargs)

    def parse_log(self, log_text):
        # should probably do something here to make this only
        # run once
        some_passes = 'TEST-PASS' in log_text
        a_failure = 'TEST-UNEXPECTED' in log_text
        all_strings = re.findall("\d+ of \d+ tests passed", log_text, re.M)
        line_pattern = re.compile("(?P<pass>\d+) of (?P<total>\d+) tests passed")
        fail_lines = re.compile('(^.*TEST-UNEXPECTED.*$)', re.M)
        todo_lines = re.compile('TODO (?P<test>.*) is DISABLED[.] Tracked in (?P<url>.*)$', re.M)
        passes = 0
        total = 0
        for string in all_strings:
            m = line_pattern.search(string)
            passes += int(m.group('pass'), 10)
            total += int(m.group('total'), 10)
        msg = "Passes:   %i\nFailures: %i\nTotal:    %i" % (passes, total-passes, total)
        if a_failure and (total-passes) == 0:
            msg += "\nTEST RESULT PARSER BUSTED, THERE ARE FAILURES"
        failing_tests = fail_lines.findall(log_text)
        if len(failing_tests) >= 1:
            msg += "\nFailing Tests\n"
            msg += "="*80
            msg += "\n"
            for i in failing_tests:
                msg += "%s\n" % i
        todo_tests = todo_lines.findall(log_text)
        if len(todo_tests) >= 1:
            msg += "\nUNIMPLEMENTED\n"
            msg += "=" * 80
            msg += "\n"
            for i in todo_tests:
                msg += "%s\n" % i
        self.passes = passes
        self.failures = total-passes
        self.total = total
        self.msg = msg


    def createSummary(self, log):
        log_text=log.getText()
        self.parse_log(log_text)
        self.addCompleteLog('test-results', self.msg)

    def evaluateCommand(self, cmd):
        superResult = self.super_class.evaluateCommand(self, cmd)
        if superResult == FAILURE:
            superResult = WARNINGS
        log_text = cmd.logs['stdio'].getText()
        self.parse_log(log_text)
        if self.passes == 0 or self.failures >= 1 or self.total == 0:
            return worst_status(superResult, WARNINGS)
        else:
            return worst_status(superResult, SUCCESS)


class ScriptBuild(BuildFactory):
    warnOnWarnings = True
    flunkOnWarnings = False

    def __init__(self, platform, script_name, repo,
                 build_style, test_dirs=[], **kwargs):
        self.platform = platform
        self.script_name = script_name
        self.repo = repo
        self.build_style = build_style
        self.test_dirs = test_dirs[:]
        BuildFactory.__init__(self, **kwargs)

        # Use buildbot to checkout sources
        self.addStep(Git(
            repourl=repo,
            branch='master',
            mode='update',
        ))
        self.addStep(FileDownload(
            mastersrc=self.script_name,
            slavedest=self.script_name,
            workdir='.',
        ))
        self.addStep(Compile(
            name="build_script",
            command=argv_conv(self.platform,
                ['bash', self.script_name, platform, build_style]),
            workdir='.',
        ))
        for test_dir in self.test_dirs:
            self.addStep(TestShellCommand(
                name="make_check_%s" % test_dir.replace("/", "_"),
                command=make(self.platform,
                             target='check',
                             keep_going=True,
                             dir=test_dir),
                workdir="objdir",
                warnOnWarnings=True,
                flunkOnWarnings=True,
            ))



from buildbot.scheduler import AnyBranchScheduler
from buildbot.config import BuilderConfig

c['builders'] = []
c['schedulers'] = []
v8monkey_builders = []
for platform in slave_names.keys():
    for style in ('opt', 'debug'):
        builder_name = "%s-%s" % (platform, style)
        v8monkey_builders.append(builder_name)
        factory = ScriptBuild(
                      platform=platform,
                      repo='git://github.com/zpao/v8monkey.git',
                      script_name='v8monkey-build.sh',
                      build_style=style,
                      test_dirs=['v8api/test'],
                  )
        c['builders'].append(
            BuilderConfig(
                name=builder_name,
                slavenames=slave_names[platform],
                category="v8monkey",
                factory=factory))

c['schedulers'].append(AnyBranchScheduler(
                           name='spidernode-scheduler',
                           treeStableTimer=None,
                           builderNames=v8monkey_builders))

spidernode_builders = []
for platform in slave_names.keys():
    if 'win32' not in platform:
        builder_name = "%s-spidernode" % platform
        spidernode_builders.append(builder_name)
        factory = ScriptBuild(
                    platform=platform,
                    repo='git://github.com/zpao/spidernode.git',
                    script_name='spidernode-build.sh',
                    build_style='opt',
                    test_dirs=[],
        )
        c['builders'].append(
            BuilderConfig(
                name=builder_name,
                slavenames=slave_names[platform],
                category="node",
                factory=factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

### HTML STATUS AND GITHUB CHANGES
from buildbot.status import html
from buildbot.status.web import auth, authz
f=open('password')
password=f.read().strip()
f.close()
users = [('admin', password)]
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = 'auth',
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=6767, authz=authz_cfg,
                                  order_console_by_time=True,
                                  change_hook_dialects={'github': True}))

### IRC BOT
notify_events={
    'failureToSuccess': 1,
    'warningsToSuccess': 1,
    'exceptionToSuccess': 1,
    'successToFailure': 1,
    'successToWarnings': 1,
    'exception': 1,
}
from buildbot.status.words import IRC
c['status'].append(IRC(host='irc.mozilla.org', nick='gertrude', 
                       channels=['#spidernode'], port=6697, useSSL=True,
                       showBlameList=True,
                       notify_events=notify_events))

### EMAIL
from buildbot.status.mail import VALID_EMAIL
from zope.interface import implements
from buildbot import interfaces, util

class GithubDomain(util.ComparableMixin):
    implements(interfaces.IEmailLookup)

    def __init__(self):
        self.pattern = re.compile("(%s)" % VALID_EMAIL.pattern)

    def getAddress(self, user):
        return self.pattern.search(user).group(0)

from buildbot.status.mail import MailNotifier
c['status'].append(MailNotifier(fromaddr="gertrude@johnford.info",
                                sendToInterestedUsers=True,
                                mode='problem',
                                lookup=GithubDomain(),
                                extraRecipients=[]))

####### PROJECT IDENTITY
c['projectName'] = "spidernode"
c['projectURL'] = "https://github.com/zpao/v8monkey"
c['buildbotURL'] = "http://buildbot.johnford.info/"

####### DB URL
c['db_url'] = "sqlite:///state.sqlite"

