# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}
####### BUILDSLAVES
from buildbot.buildslave import BuildSlave

branches = ['master', 'v8-api-tests']

slave_names = {
    'x86-win32': ['sdwilsh-windows%i' % x for x in range(1,5)],
    'x86-fedora': ['johnford.info-slave1'],
    'x86-freebsd': ['robarnold-slave%i' % x for x in range(1,3)],
    'x86_64-osx': ['zpao-slave%i' % x for x in range(1,3)] +
                  ['gavin-slave%i' % x for x in range(1,3)],
}
slaves = {}
c['slaves'] = []
for platform in slave_names.keys():
    slaves[platform] = []
    for i in slave_names[platform]:
      slave = BuildSlave(i, "password", max_builds=1)
      slaves[platform].append(slave)
      c['slaves'].append(slave)
c['slavePortnum'] = 9989

####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Configure, Compile, ShellCommand

def argv_conv(platform, cmd):
    if 'win32' in platform:
        if type(cmd) is str:
            str_cmd = cmd
        else:
            str_cmd = ' '.join(cmd)
        real_cmd = str_cmd
    else:
        real_cmd = cmd
    print platform, '\t', real_cmd
    return real_cmd

def make(platform, target=None, file=None, dir=None, vars=None,
         keep_going=False):
    #FreeBSD uses gmake for GNU Make
    if 'freebsd' in platform:
        cmd_list = ['gmake']
    else:
        cmd_list = ['make']
    if keep_going:
        cmd_list.append('-k')
    if file:
        cmd_list.extend(['-f', file])
    if dir:
        cmd_list.extend(['-C', dir])
    if target:
        cmd_list.append(target)
    if vars:
        assert type(vars) is dict, "make vars should be in dict"
        for key in vars.keys():
            cmd_list.append("%s=%s" % (key, vars[key]))
    return argv_conv(platform, cmd_list)

from buildbot.status.builder import FAILURE, SUCCESS, WARNINGS, worst_status

class TestShellCommand(ShellCommand):
    warnOnFailure = True

    def __init__(self, **kwargs):
        self.super_class = ShellCommand
        self.super_class.__init__(self, **kwargs)

    def createSummary(self, log):
        log_text=log.getText()
        passes = log_text.count('TEST-PASS')
        fails = log_text.count('TEST-UNEXPECTED')
        self.addCompleteLog('test-results', '%i/%i' % (passes, fails))

    def evaluateCommand(self, cmd):
        superResult = self.super_class.evaluateCommand(self, cmd)
        if superResult == FAILURE:
            superResult = WARNINGS
        log = cmd.logs['stdio'].getText()
        some_passes = 'TEST-PASS' in log
        a_failure = 'TEST-UNEXPECTED' in log
        if not some_passes or a_failure:
            return worst_status(superResult, WARNINGS)
        else:
            return worst_status(superResult, SUCCESS)

class NodeMonkeyFactory(BuildFactory):

  def __init__(self, platform, branch='master',
               build_style='opt', test_dirs=[],
               **kwargs):
    self.platform = platform
    self.branch = branch
    self.build_style = style
    self.test_dirs = test_dirs[:]
    BuildFactory.__init__(self, **kwargs)
    self.add_setup_steps()
    self.add_source_steps()
    self.add_build_steps()
    self.add_package_steps()
    self.add_upload_steps()
    self.add_test_steps()

  def add_setup_steps(self):
    self.addStep(ShellCommand(
        name='clobber_objdir',
        command=argv_conv(self.platform, ['rm', '-rf', 'objdir']),
        workdir="."))

  def add_source_steps(self):
    self.addStep(Git(
        repourl='git://github.com/zpao/v8monkey.git',
        branch=self.branch,
        mode='update'))

  def add_build_steps(self):
    autoconf_bin = 'autoconf213' if 'osx' in self.platform else 'autoconf-2.13'
    # Windows needs to build NSPR for spidermonkey to work correctly.
    if 'win32' in self.platform:
      self.addStep(ShellCommand(
          name='autoconf2.13',
          command=argv_conv(self.platform, ['sh', '-c', "autoconf-2.13"]),
          workdir="build/nsprpub"))
      configure_arg_list = ['--prefix=$(sh -c pwd)/../../nspr-objdir/dist',
                            '--with-dist-prefix=$(sh -c pwd)/../../nspr-objdir/dist', 
                            '--with-mozilla']
      if self.build_style == 'opt':
        configure_arg_list.append('--enable-optimize')
        configure_arg_list.append('--enable-tests')
      elif self.build_style == 'debug':
        configure_arg_list.append('--disable-optimize')
        configure_arg_list.append('--enable-debug')

      self.addStep(Configure(
          command=argv_conv(self.platform,
                    ['sh', '-c', '../build/nsprpub/configure %s' % ' '.join(configure_arg_list)]),
          workdir="nspr-objdir"))

      self.addStep(Compile(
          workdir="nspr-objdir",
          command=make(self.platform)))

      self.addStep(ShellCommand(
          name='nspr install',
          command=argv_conv(self.platform, ['sh', '-c', "make install"]),
          workdir="nspr-objdir"))

    self.addStep(ShellCommand(
        name='autoconf',
        command=argv_conv(self.platform, ['sh', '-c', autoconf_bin]),
        workdir="build/js/src"))
    configure_arg_list = []
    if self.build_style == 'opt':
      configure_arg_list.append('--enable-optimize')
      configure_arg_list.append('--enable-tests')
    elif self.build_style == 'debug':
      configure_arg_list.append('--disable-optimize')
      configure_arg_list.append('--enable-debug')

    # Windows needs to use the custom build nspr.
    if 'win32' in self.platform:
      nspr_libs_dir = '../nspr-objdir/dist/lib'
      configure_arg_list.append('--with-nspr-prefix=../nspr-objdir/dist')
      configure_arg_list.append('--with-nspr-libs="%s/plds4.lib %s/plc4.lib %s/nspr4.lib"' % (nspr_libs_dir, nspr_libs_dir, nspr_libs_dir))
      configure_arg_list.append('--with-nspr-cflags="-I../nspr-objdir/dist/include"')

    self.addStep(Configure(
        command=argv_conv(self.platform,
                  ['sh', '-c', '../build/js/src/configure %s' % ' '.join(configure_arg_list)]),
        workdir="objdir"))

    self.addStep(Compile(
        workdir="objdir",
        command=make(self.platform)))

  #methods stubbed out for now
  def add_package_steps(self):
    pass
  def add_upload_steps(self):
    pass
  def add_test_steps(self):
    self.addStep(ShellCommand(
        name="cp_run-mozilla.sh",
        command=argv_conv(self.platform,
                          ['sh', '-c', 'cp build/build/unix/run-mozilla.sh objdir/dist/bin/']),
        workdir='.',
        flunkOnFailure=False,
        warnOnFailure=False))
    for test_dir in self.test_dirs:
        self.addStep(TestShellCommand(
            name="make_check" % test_dir,
            command=make(self.platform,
                         target='check',
                         keep_going=False,
                         dir=test_dir),
            workdir="objdir"))


from buildbot.scheduler import Scheduler
from buildbot.config import BuilderConfig

c['builders'] = []
c['schedulers'] = []
for branch in branches:
    branch_builders = []
    for platform in slave_names.keys():
        for style in ('opt', 'debug'):
            builder_name = "%s-%s-%s" % (platform, branch, style)
            branch_builders.append(builder_name)
            factory = NodeMonkeyFactory(
                          platform=platform,
                          branch=branch,
                          build_style=style,
                          test_dirs=['v8api/test'],
                      )
            c['builders'].append(
                BuilderConfig(
                    name=builder_name,
                    slavenames=slave_names[platform],
                    category=branch,
                    factory=factory))
    c['schedulers'].append(Scheduler(
                               name='%s-sched' % branch, 
                               branch=branch,
                               treeStableTimer=None,
                               builderNames=branch_builders))
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

### HTML STATUS AND GITHUB CHANGES
from buildbot.status import html
from buildbot.status.web import auth, authz
f=open('password')
password=f.read().strip()
f.close()
users = [('admin', password)]
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = 'auth',
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg,
                                  change_hook_dialects={'github': True}))

### IRC BOT
notify_events={
    'successToFailure': 1,
    'successToWarnings': 1,
    'exception': 1,
}
from buildbot.status.words import IRC
c['status'].append(IRC(host='irc.mozilla.org', nick='gertrude', 
                       channels=['#spidernode'], port=6697, useSSL=True,
                       showBlameList=True,
                       notify_events=notify_events))

### EMAIL
from buildbot.status.mail import VALID_EMAIL
from zope.interface import implements
from buildbot import interfaces, util
import re

class GithubDomain(util.ComparableMixin):
    implements(interfaces.IEmailLookup)

    def __init__(self):
        self.pattern = re.compile("(%s)" % VALID_EMAIL.pattern)

    def getAddress(self, user):
        return self.pattern.search(user).group(0)

from buildbot.status.mail import MailNotifier
c['status'].append(MailNotifier(fromaddr="gertrude@johnford.info",
                                sendToInterestedUsers=True,
                                mode='problem',
                                lookup=GithubDomain(),
                                extraRecipients=[]))

####### PROJECT IDENTITY
c['projectName'] = "spidernode"
c['projectURL'] = "https://github.com/zpao/v8monkey"
c['buildbotURL'] = "http://johnford.info:8010/"

####### DB URL
c['db_url'] = "sqlite:///state.sqlite"

